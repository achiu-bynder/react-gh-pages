{"version":3,"sources":["Component.js","App.js","serviceWorker.js","index.js"],"names":["Peer","window","p5","Component","useState","peerId","setPeerId","peer","setPeer","friendPeerId","setFriendPeerId","friendPeer","setFriendPeer","connected","setConnected","conn","setConn","messageList","setMessageList","console","log","useEffect","key","on","id","data","send","myRec","SpeechRec","mostrecentword","resultString","split","pop","indexOf","_sendMessage","continuous","interimResults","start","connect","text","length","author","type","className","Button","onClick","Input","onChange","e","target","value","action","placeholder","isOpen","agentProfile","teamName","imageUrl","onMessageWasSent","message","bind","this","showEmoji","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6RAIMA,EAAOC,OAAOD,KACdE,EAAKD,OAAOC,GA6JHC,MA5Jf,WAAsB,IAAD,EACSC,mBAAS,MADlB,mBACZC,EADY,KACJC,EADI,OAEKF,mBAAS,MAFd,mBAEZG,EAFY,KAENC,EAFM,OAGqBJ,mBAAS,MAH9B,mBAGZK,EAHY,KAGEC,EAHF,OAIiBN,mBAAS,MAJ1B,mBAIZO,EAJY,KAIAC,EAJA,OAKeR,oBAAS,GALxB,mBAKZS,EALY,KAKDC,EALC,OAMKV,mBAAS,MANd,mBAMZW,EANY,KAMNC,EANM,OAOmBZ,mBAAS,IAP5B,mBAOZa,EAPY,KAOCC,EAPD,OAQOd,mBAAS,MARhB,6BASnBe,QAAQC,IAAI,OAAQH,GAEpBI,oBAAU,WACR,IAAId,EAAO,IAAIP,EAAK,CAAEsB,IAAK,mBAC3Bd,EAAQD,GAERA,EAAKgB,GAAG,OAAQ,SAASC,GACvBL,QAAQC,IAAI,kBAAoBI,GAChClB,EAAUkB,KAGZjB,EAAKgB,GAAG,aAAc,SAASR,GAC7BC,EAAQD,GACRA,EAAKQ,GAAG,OAAQ,WAEdJ,QAAQC,IAAI,YAAaL,GACzBD,GAAa,GACbC,EAAKQ,GAAG,OAAQ,SAASE,GACvBN,QAAQC,IAAI,WAAYK,KAI1BV,EAAKW,KAAK,eAGb,IAEHL,oBAAU,WACR,IAAIM,EAAQ,IAAIzB,EAAG0B,UAAU,QAK7B,WAGE,IAAIC,EAAiBF,EAAMG,aAAaC,MAAM,KAAKC,OACX,IAApCH,EAAeI,QAAQ,UAKqB,IAArCJ,EAAeI,QAAQ,WAKW,IAAlCJ,EAAeI,QAAQ,QAKa,IAApCJ,EAAeI,QAAQ,SAKvBJ,EAAeI,QAAQ,SAKlCC,EAAaP,EAAMG,cACff,GACFA,EAAKW,KAAKC,EAAMG,gBAnCpBH,EAAMQ,YAAa,EACnBR,EAAMS,gBAAiB,EACvBT,EAAMU,SAoCL,CAACpB,IAEJI,oBAAU,WAER,GADAF,QAAQC,IAAI,aAAcT,GACtBJ,EAAM,CACR,IAAIQ,EAAOR,EAAK+B,QAAQ3B,GACxBG,GAAa,GACbE,EAAQD,GAERI,QAAQC,IAAI,aAAcL,KAE3B,CAACJ,EAAYJ,IAEhB,IAKM2B,EAAe,SAAAK,GACfA,EAAKC,OAAS,GAChBtB,EAAe,GAAD,mBACTD,GADS,CAEZ,CACEwB,OAAQ,OACRC,KAAM,OACNjB,KAAM,CAAEc,aAMhB,OACE,yBAAKI,UAAU,OACb,4BAAQA,UAAU,cACflC,EACAI,GACC,kBAAC+B,EAAA,EAAD,CACEC,QAAS,WACP/B,GAAa,KAFjB,eAQAD,GACA,kBAACiC,EAAA,EAAD,CACEC,SAAU,SAAAC,GACRtC,EAAgBsC,EAAEC,OAAOC,QAE3BC,OACE,kBAACP,EAAA,EAAD,CACEC,QAAS,WACPjC,EAAcH,GACdyB,EAAa,UAHjB,QASFkB,YAAY,oBAGf/C,EAED,kBAAC,IAAD,CACEgD,QAAQ,EACRC,aAAc,CACZC,SAAU,oBACVC,SACE,mEAEJC,iBA1DkB,SAAAC,GACxB3C,EAAKW,KAAKgC,GACVxC,EAAe,GAAD,mBAAKD,GAAL,CAAkByC,MAwDUC,KAAKC,MACzC3C,YAAaA,EACb4C,WAAS,OCtJN5D,OAAOD,KACTC,OAAOC,GAWH4D,MAVf,WACE,OACE,yBAAKnB,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,SCCYoB,QACW,cAA7B9D,OAAO+D,SAASC,UAEe,UAA7BhE,OAAO+D,SAASC,UAEhBhE,OAAO+D,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.cd1970fe.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport { Launcher } from \"react-chat-window\";\nimport { Input, Button } from \"semantic-ui-react\";\nconst Peer = window.Peer;\nconst p5 = window.p5;\nfunction Component() {\n  const [peerId, setPeerId] = useState(null);\n  const [peer, setPeer] = useState(null);\n  const [friendPeerId, setFriendPeerId] = useState(null);\n  const [friendPeer, setFriendPeer] = useState(null);\n  const [connected, setConnected] = useState(false);\n  const [conn, setConn] = useState(null);\n  const [messageList, setMessageList] = useState([]);\n  const [myRec, setMyRec] = useState(null);\n  console.log(\"list\", messageList);\n\n  useEffect(() => {\n    var peer = new Peer({ key: \"lwjd5qra8257b9\" });\n    setPeer(peer);\n\n    peer.on(\"open\", function(id) {\n      console.log(\"My peer ID is: \" + id);\n      setPeerId(id);\n    });\n\n    peer.on(\"connection\", function(conn) {\n      setConn(conn);\n      conn.on(\"open\", function() {\n        // Receive messages\n        console.log(\"connected\", conn);\n        setConnected(true);\n        conn.on(\"data\", function(data) {\n          console.log(\"Received\", data);\n        });\n\n        // Send messages\n        conn.send(\"Hello!\");\n      });\n    });\n  }, []);\n\n  useEffect(() => {\n    var myRec = new p5.SpeechRec(\"en-US\", parseResult); // new P5.SpeechRec object\n    myRec.continuous = true; // do continuous recognition\n    myRec.interimResults = true; // allow partial recognition (faster, less accurate)\n    myRec.start();\n\n    function parseResult() {\n      // recognition system will often append words into phrases.\n      // so hack here is to only use the last word:\n      var mostrecentword = myRec.resultString.split(\" \").pop();\n      if (mostrecentword.indexOf(\"left\") !== -1) {\n        /*\n    dx = -1;\n    dy = 0;\n    */\n      } else if (mostrecentword.indexOf(\"right\") !== -1) {\n        /*\n    dx = 1;\n    dy = 0;\n    */\n      } else if (mostrecentword.indexOf(\"up\") !== -1) {\n        /*\n    dx = 0;\n    dy = -1;\n    */\n      } else if (mostrecentword.indexOf(\"down\") !== -1) {\n        /*\n    dx = 0;\n    dy = 1;\n    */\n      } else if (mostrecentword.indexOf(\"clear\") !== -1) {\n        /*\n    background(255);\n    */\n      }\n      _sendMessage(myRec.resultString);\n      if (conn) {\n        conn.send(myRec.resultString);\n      }\n    }\n  }, [messageList]);\n\n  useEffect(() => {\n    console.log(\"friendPeer\", friendPeer);\n    if (peer) {\n      var conn = peer.connect(friendPeer);\n      setConnected(true);\n      setConn(conn);\n\n      console.log(\"connection\", conn);\n    }\n  }, [friendPeer, peer]);\n\n  const _onMessageWasSent = message => {\n    conn.send(message);\n    setMessageList([...messageList, message]);\n  };\n\n  const _sendMessage = text => {\n    if (text.length > 0) {\n      setMessageList([\n        ...messageList,\n        {\n          author: \"them\",\n          type: \"text\",\n          data: { text }\n        }\n      ]);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {friendPeerId}\n        {connected && (\n          <Button\n            onClick={() => {\n              setConnected(false);\n            }}\n          >\n            Disconnect\n          </Button>\n        )}\n        {!connected && (\n          <Input\n            onChange={e => {\n              setFriendPeerId(e.target.value);\n            }}\n            action={\n              <Button\n                onClick={() => {\n                  setFriendPeer(friendPeerId);\n                  _sendMessage(\"fuck\");\n                }}\n              >\n                fuck\n              </Button>\n            }\n            placeholder=\"Connect to peer\"\n          />\n        )}\n        {peerId}\n\n        <Launcher\n          isOpen={true}\n          agentProfile={{\n            teamName: \"react-chat-window\",\n            imageUrl:\n              \"https://a.slack-edge.com/66f9/img/avatars-teams/ava_0001-34.png\"\n          }}\n          onMessageWasSent={_onMessageWasSent.bind(this)}\n          messageList={messageList}\n          showEmoji\n        />\n      </header>\n    </div>\n  );\n}\n\nexport default Component;\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport { Launcher } from \"react-chat-window\";\nimport { Input, Button } from \"semantic-ui-react\";\nimport Component from \"./Component\";\nconst Peer = window.Peer;\nconst p5 = window.p5;\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Component></Component>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}